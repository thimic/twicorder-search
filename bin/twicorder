#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import asyncclick as click
import faulthandler
import os
import sys

import aiosqlite

from concurrent.futures import ThreadPoolExecutor

from twicorder.constants import (
    DEFAULT_EXPAND_USERS_INTERVAL,
    DEFAULT_APP_DATA_CONNECTION_TIMEOUT,
)


@click.group()
@click.option('--project-dir', help='Root directory for project')
@click.pass_context
def cli(ctx: click.Context, project_dir: str):
    """
    Twicorder Search
    """
    faulthandler.enable()
    ctx.obj = dict(project_dir=project_dir)


@cli.command()
@click.option(
    '--clear-cache',
    is_flag=True,
    default=False,
    help='Clear cache and exit'
)
@click.option(
    '--purge-logs',
    is_flag=True,
    default=False,
    help='Purge logs and exit'
)
@click.pass_context
def utils(ctx: click.Context, clear_cache: bool, purge_logs: bool):
    """
    Utility functions
    """
    from twicorder import config
    config.load(
        project_dir=ctx.obj['project_dir'],
    )
    from twicorder.controller import Twicorder
    Twicorder(clear_cache=clear_cache, purge_logs=purge_logs)


@cli.command()
@click.option('--consumer-key', help='Twitter consumer key', required=True)
@click.option('--consumer-secret', help='Twitter consumer secret', required=True)
@click.option('--access-token', help='Twitter access token', required=True)
@click.option('--access-secret', help='Twitter access secret', required=True)
@click.option('--out-dir', help='Custom output dir for crawled data')
@click.option(
    '--out-extension',
    help='File extension for crawled files (.txt or .zip)'
)
@click.option('--task-file', help='Yaml file containing tasks to execute')
@click.option(
    '--use-mongo',
    is_flag=True,
    default=False,
    help='Additionally store tweets in MongoDB'
)
@click.option(
    '--full-user-mentions',
    is_flag=True,
    default=False,
    help='For mentions, look up full user data'
)
@click.option(
    '--user-lookup-interval',
    default=DEFAULT_EXPAND_USERS_INTERVAL,
    show_default=True,
    help='Minutes between lookups of the same user'
)
@click.option(
    '--appdata-timeout',
    default=DEFAULT_APP_DATA_CONNECTION_TIMEOUT,
    show_default=True,
    help='Seconds to timeout for internal data store'
)
@click.pass_context
async def run(ctx: click.Context, consumer_key: str, consumer_secret: str,
              access_token: str, access_secret: str, out_dir: str,
              out_extension: str, task_file: str, use_mongo: bool,
              full_user_mentions: bool, user_lookup_interval: int,
              appdata_timeout: float):
    """
    Start crawler
    """
    loop = asyncio.get_event_loop()
    loop.set_default_executor(ThreadPoolExecutor(max_workers=8))

    from twicorder import config
    config.load(
        consumer_key=consumer_key,
        consumer_secret=consumer_secret,
        access_token=access_token,
        access_secret=access_secret,
        project_dir=ctx.obj['project_dir'],
        out_dir=out_dir,
        out_extension=out_extension,
        task_file=task_file,
        use_mongo=use_mongo,
        full_user_mentions=full_user_mentions,
        user_lookup_interval=user_lookup_interval,
        appdata_timeout=appdata_timeout
    )
    from twicorder.config import Config
    from twicorder.logger import TwiLogger
    from twicorder.controller import Twicorder
    logger = TwiLogger()
    twicorder = Twicorder()
    try:
        if not os.path.exists(Config.appdata_dir):
            os.makedirs(Config.appdata_dir)
        async with aiosqlite.connect(
                Config.appdata,
                timeout=float(Config.appdata_timeout)
        ) as db:
            await twicorder.run(db=db)
    except Exception:
        logger.exception('Twicorder encountered an error and quit:\n')
        sys.exit(1)


if __name__ == '__main__':
    try:
        cli(_anyio_backend='asyncio', auto_envvar_prefix='TWICORDER')
    except KeyboardInterrupt:
        click.echo('Twicorder was terminated on request')
        sys.exit(0)
